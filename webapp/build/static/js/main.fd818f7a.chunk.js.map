{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormulaList","formulaList","name","functionsDOM","map","functionString","Node","inline","App","useState","input","setInput","original","setOriginal","result","setResult","className","style","margin","bottomMargin","href","value","onChange","e","target","id","onClick","xhr","XMLHttpRequest","response","addEventListener","JSON","parse","responseText","Original","Result","open","send","Context","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAKA,SAASA,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,KAC3BC,EAAeF,EAAYG,KAAI,SAACC,GAAD,OAC/B,+BACI,kBAAC,IAAQC,KAAT,CAAcC,QAAM,GAAEF,EAAtB,SAIR,OACI,6BACKH,EADL,MACcC,GAuGPK,MAlGf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAEJC,EAFI,KAEGC,EAFH,OAIqBF,mBAAS,IAJ9B,mBAIJG,EAJI,KAIMC,EAJN,OAKiBJ,mBAAS,IAL1B,mBAKJK,EALI,KAKIC,EALJ,OAOuBN,mBAAS,MAPhC,mBAsCX,OAtCW,UAuCP,yBAAKO,UAAU,OACX,yBAAKA,UAAU,UACX,6BACI,wBAAIC,MAAO,CACPC,OAAQ,MACRC,aAAc,QAFlB,cAIA,wBAAIF,MAAO,CACPC,OAAQ,QADZ,2BAKJ,6BACI,wDACA,uBAAGE,KAAK,yCAAR,4CAMJ,0CACA,yBAAKJ,UAAU,qBACX,2BAAOK,MAAOX,EAAOY,SApDrC,SAAqBC,GACjBZ,EAASY,EAAEC,OAAOH,UAoDN,4BAAQI,GAAI,eAAgBC,QAjD5C,WACI,IAAIC,EAAM,IAAIC,eAEVC,EAAW,GAEfF,EAAIG,iBAAiB,QAAQ,WAEzBD,EAAWE,KAAKC,MAAML,EAAIM,cAC1BpB,EAAYgB,EAASK,UACrBnB,EAAUc,EAASM,WAIvBR,EAAIS,KAAK,OAAQ,oCAEjBT,EAAIU,KAAK3B,KAkCG,eAGJ,kBAAC,IAAQ4B,QAAT,CAAiB5B,MAAM,OACnB,yBAAKe,GAAG,aACJ,wBAAIT,UAAU,eAAd,YACA,kBAAC,IAAQV,KAAT,KAAeM,EAAf,KACA,wBAAII,UAAU,eAAd,mBACA,kBAAC,IAAQV,KAAT,KAAeQ,EAAf,KACA,yBAAKE,UAAU,gBAIvB,yBAAKA,UAAU,eACX,wBAAIA,UAAU,eAAd,qBACA,kBAAC,IAAQsB,QAAT,CAAiB5B,MAAM,OACnB,6BACI,kBAACV,EAAD,CAAaC,YA7Cd,CAAC,IAAK,IAAK,IAAK,IAAK,KA6CwBC,KAAM,yBAClD,kBAACF,EAAD,CAAaC,YAjDV,CAAC,SAAU,SAAU,UAiDwBC,KAAM,kBACtD,kBAACF,EAAD,CAAaC,YAjDb,CAAC,UAAW,UAAW,WAiDsBC,KAAM,gBACnD,kBAACF,EAAD,CAAaC,YAjDT,CAAC,SAAU,OAiDkCC,KAAM,0BACvD,kBAACF,EAAD,CAAaC,YAhDf,CAAC,IAAK,IAAK,IAAK,UAgD6BC,KAAM,cACjD,kBAACF,EAAD,CAAaC,YAhDf,CAAC,IAAK,IAAK,IAAK,UAgD6BC,KAAM,cACjD,qCAAU,kBAAC,IAAQI,KAAT,CAAcC,QAAM,GAApB,OAAV,yBACA,yCACA,iEAGR,yBAAKS,UAAU,kBCjGfuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fd818f7a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport MathJax from 'react-mathjax2'\n\n\nfunction FormulaList({formulaList, name}) {\n    let functionsDOM = formulaList.map((functionString) => (\n        <label>\n            <MathJax.Node inline>{functionString} </MathJax.Node>\n        </label>\n    ));\n\n    return (\n        <div>\n            {name} : {functionsDOM}\n        </div>\n    )\n}\n\nfunction App() {\n\n    const [input, setInput] = useState(\"\");\n\n    const [original, setOriginal] = useState(\"\");\n    const [result, setResult] = useState(\"\");\n\n    const [pdfBase64, setPdfBase64] = useState(null);\n\n    function changeInput(e) {\n        setInput(e.target.value);\n    }\n\n    function onClick() {\n        var xhr = new XMLHttpRequest();\n\n        var response = {};\n        // get a callback when the server responds\n        xhr.addEventListener('load', () => {\n            // update the state of the component with the result here\n            response = JSON.parse(xhr.responseText);\n            setOriginal(response.Original);\n            setResult(response.Result);\n            //setPdfBase64(xhr.responseText);\n        });\n        // open the request with the verb and the url\n        xhr.open('POST', 'http://localhost:7777/derivative');\n        // send the request\n        xhr.send(input)\n    }\n\n    let trigonometricsString = [\"sin(x)\", \"cos(x)\", \"tan(x)\"];\n    let hiperbolicsString = [\"sinh(x)\", \"cosh(x)\", \"tanh(x)\"];\n    let exponentAndLogsString = [\"log(x)\", \"e^x\"];\n    let elementaryString = [\"+\", \"-\", \"*\", \"/\", \"^\"];\n    let variablesString = [\"x\", \"y\", \"z\", \"x_{56}\"];\n    let constantsString = [\"a\", \"b\", \"c\", \"a_{88}\"];\n\n    return (\n        <div className=\"App\">\n            <div className=\"column\">\n                <div>\n                    <h1 style={{\n                        margin: \"0px\",\n                        bottomMargin: \"0px\"\n                    }}> Symbolan </h1>\n                    <h6 style={{\n                        margin: \"0px\"\n                    }}> (Very original name) </h6>\n                </div>\n\n                <div>\n                    <h3> Source code here (WIP) </h3>\n                    <a href=\"https://github.com/Fransebas/symbolan\"> https://github.com/Fransebas/symbolan </a>\n                </div>\n\n\n\n\n                <h3> Derivate </h3>\n                <div className=\"flexItem inputDiv\">\n                    <input value={input} onChange={changeInput}/>\n                    <button id={\"submitButton\"} onClick={onClick}> Derivate </button>\n                </div>\n\n                <MathJax.Context input='tex'>\n                    <div id=\"resultBox\">\n                        <h5 className=\"resultTitle\"> Input: </h5>\n                        <MathJax.Node>{original} </MathJax.Node>\n                        <h5 className=\"resultTitle\"> Differential: </h5>\n                        <MathJax.Node>{result} </MathJax.Node>\n                        <div className=\"bottomBox\"/>\n                    </div>\n                </MathJax.Context>\n\n                <div className=\"explanation\">\n                    <h5 className=\"resultTitle\"> Valid functions </h5>\n                    <MathJax.Context input='tex'>\n                        <div>\n                            <FormulaList formulaList={elementaryString} name={\"Elementary Functions\"}/>\n                            <FormulaList formulaList={trigonometricsString} name={\"Trigonometric\"}/>\n                            <FormulaList formulaList={hiperbolicsString} name={\"Hiperbolics\"}/>\n                            <FormulaList formulaList={exponentAndLogsString} name={\"Logs and exponentials\"}/>\n                            <FormulaList formulaList={variablesString} name={\"Variables\"}/>\n                            <FormulaList formulaList={constantsString} name={\"Constants\"}/>\n                            <p> Where <MathJax.Node inline> x </MathJax.Node> can be any function </p>\n                            <h5> Example:</h5>\n                            <p> sin(7x^2) + log(sinh(y)) + a_9 </p>\n                        </div>\n                    </MathJax.Context>\n                    <div className=\"bottomBox\"/>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}